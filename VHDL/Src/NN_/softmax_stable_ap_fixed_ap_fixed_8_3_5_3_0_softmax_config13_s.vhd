-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_stable_ap_fixed_ap_fixed_8_3_5_3_0_softmax_config13_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    res_0_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    res_0_V_ap_vld : OUT STD_LOGIC;
    res_1_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    res_1_V_ap_vld : OUT STD_LOGIC;
    res_2_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    res_2_V_ap_vld : OUT STD_LOGIC;
    res_3_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    res_3_V_ap_vld : OUT STD_LOGIC;
    res_4_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    res_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of softmax_stable_ap_fixed_ap_fixed_8_3_5_3_0_softmax_config13_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exp_table1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce0 : STD_LOGIC;
    signal exp_table1_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce1 : STD_LOGIC;
    signal exp_table1_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce2 : STD_LOGIC;
    signal exp_table1_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce3 : STD_LOGIC;
    signal exp_table1_q3 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce4 : STD_LOGIC;
    signal exp_table1_q4 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table2_ce0 : STD_LOGIC;
    signal invert_table2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal data_4_V_read_1_reg_1019 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_V_read_1_reg_1019_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_V_read_1_reg_1019_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_V_read_1_reg_1026 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_V_read_1_reg_1026_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_V_read_1_reg_1026_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_V_read_1_reg_1032 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_V_read_1_reg_1032_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_V_read_1_reg_1032_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_V_read_1_reg_1038 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_V_read_1_reg_1038_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_V_read_1_reg_1038_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_V_read_1_reg_1044 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_V_read_1_reg_1044_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_V_read_1_reg_1044_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_reg_1050 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_reg_1055 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_227_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_reg_1060 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_232_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_reg_1065 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_2_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_2_reg_1070 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_2_fu_243_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_2_reg_1075 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_3_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_3_reg_1080 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1085 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1092 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1099 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1106 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_1113 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_1120 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1127 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1134 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1141 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1148 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1155 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_1161 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_reg_1167 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_reg_1173 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_reg_1179 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_fu_571_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_reg_1185 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_fu_593_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_reg_1190 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_615_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_reg_1195 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_fu_637_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_reg_1200 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_fu_659_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_reg_1205 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_reg_1205_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_reg_1205_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_0_V_reg_1230 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_1230_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_1230_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_1230_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_1230_pp0_iter10_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_1230_pp0_iter11_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_1230_pp0_iter12_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1236 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1236_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1236_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1236_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1236_pp0_iter10_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1236_pp0_iter11_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1236_pp0_iter12_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1242 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1242_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1242_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1242_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1242_pp0_iter10_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1242_pp0_iter11_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1242_pp0_iter12_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1248 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1248_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1248_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1248_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1248_pp0_iter10_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1248_pp0_iter11_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1248_pp0_iter12_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_12_fu_707_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_12_reg_1259 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_13_fu_735_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_13_reg_1265 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_4_V_reg_1271 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_V_reg_1271_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_V_reg_1271_pp0_iter10_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_V_reg_1271_pp0_iter11_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_V_reg_1271_pp0_iter12_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_15_fu_755_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_reg_1278 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_15_fu_763_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_15_reg_1284 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_16_fu_767_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_reg_1289 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln388_5_fu_787_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln388_5_reg_1295 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_17_reg_1300 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_reg_1307 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1314 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_5_fu_909_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_5_reg_1320 : STD_LOGIC_VECTOR (9 downto 0);
    signal inv_exp_sum_V_reg_1330 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1116_fu_921_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_989_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1118_reg_1369 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_995_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1118_1_reg_1374 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1001_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1118_2_reg_1379 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1007_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1118_3_reg_1384 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1013_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1118_4_reg_1389 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln255_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln255_1_fu_671_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_2_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_3_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_4_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_fu_917_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln1496_fu_215_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_215_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_221_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_221_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_max_V_fu_253_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_fu_258_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_1_fu_261_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_fu_265_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_2_fu_287_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_1_fu_290_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_3_fu_312_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_2_fu_315_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_4_fu_337_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_3_fu_340_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_5_fu_362_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_4_fu_365_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal xor_ln786_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_4_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_4_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_5_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_557_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_fu_564_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_6_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_1_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_579_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_1_fu_586_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_7_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_2_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_601_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_2_fu_608_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_8_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_3_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_6_fu_623_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_3_fu_630_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_9_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_4_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_8_fu_645_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_4_fu_652_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_6_fu_687_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_7_fu_690_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_8_fu_693_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_s_fu_699_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_fu_715_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_10_fu_718_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_11_fu_721_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_14_fu_727_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_746_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lhs_V_fu_743_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_fu_749_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal xor_ln786_5_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_11_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_10_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_5_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_12_fu_809_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_16_fu_816_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_1_fu_826_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_1_fu_830_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_1_fu_833_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_17_fu_823_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_19_fu_847_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal xor_ln786_6_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_13_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_12_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_6_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_14_fu_895_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_6_fu_902_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_989_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_989_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_995_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_995_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1001_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1001_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1007_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1007_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1013_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1013_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_989_ce : STD_LOGIC;
    signal grp_fu_995_ce : STD_LOGIC;
    signal grp_fu_1001_ce : STD_LOGIC;
    signal grp_fu_1007_ce : STD_LOGIC;
    signal grp_fu_1013_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to15 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1001_p10 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1007_p10 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1013_p10 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_989_p10 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_995_p10 : STD_LOGIC_VECTOR (22 downto 0);

    component myproject_mul_mul_18s_17ns_23_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_8_3_5_3_0_softmax_config13_s_exp_table1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_8_3_5_3_0_softmax_config13_s_invert_table2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table1_U : component softmax_stable_ap_fixed_ap_fixed_8_3_5_3_0_softmax_config13_s_exp_table1
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table1_address0,
        ce0 => exp_table1_ce0,
        q0 => exp_table1_q0,
        address1 => exp_table1_address1,
        ce1 => exp_table1_ce1,
        q1 => exp_table1_q1,
        address2 => exp_table1_address2,
        ce2 => exp_table1_ce2,
        q2 => exp_table1_q2,
        address3 => exp_table1_address3,
        ce3 => exp_table1_ce3,
        q3 => exp_table1_q3,
        address4 => exp_table1_address4,
        ce4 => exp_table1_ce4,
        q4 => exp_table1_q4);

    invert_table2_U : component softmax_stable_ap_fixed_ap_fixed_8_3_5_3_0_softmax_config13_s_invert_table2
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table2_address0,
        ce0 => invert_table2_ce0,
        q0 => invert_table2_q0);

    myproject_mul_mul_18s_17ns_23_3_1_U470 : component myproject_mul_mul_18s_17ns_23_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_989_p0,
        din1 => grp_fu_989_p1,
        ce => grp_fu_989_ce,
        dout => grp_fu_989_p2);

    myproject_mul_mul_18s_17ns_23_3_1_U471 : component myproject_mul_mul_18s_17ns_23_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_995_p0,
        din1 => grp_fu_995_p1,
        ce => grp_fu_995_ce,
        dout => grp_fu_995_p2);

    myproject_mul_mul_18s_17ns_23_3_1_U472 : component myproject_mul_mul_18s_17ns_23_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1001_p0,
        din1 => grp_fu_1001_p1,
        ce => grp_fu_1001_ce,
        dout => grp_fu_1001_p2);

    myproject_mul_mul_18s_17ns_23_3_1_U473 : component myproject_mul_mul_18s_17ns_23_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1007_p0,
        din1 => grp_fu_1007_p1,
        ce => grp_fu_1007_ce,
        dout => grp_fu_1007_p2);

    myproject_mul_mul_18s_17ns_23_3_1_U474 : component myproject_mul_mul_18s_17ns_23_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1013_p0,
        din1 => grp_fu_1013_p1,
        ce => grp_fu_1013_ce,
        dout => grp_fu_1013_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_0_V_read_1_reg_1044 <= data_0_V_read;
                data_0_V_read_1_reg_1044_pp0_iter1_reg <= data_0_V_read_1_reg_1044;
                data_1_V_read_1_reg_1038 <= data_1_V_read;
                data_1_V_read_1_reg_1038_pp0_iter1_reg <= data_1_V_read_1_reg_1038;
                data_2_V_read_1_reg_1032 <= data_2_V_read;
                data_2_V_read_1_reg_1032_pp0_iter1_reg <= data_2_V_read_1_reg_1032;
                data_3_V_read_1_reg_1026 <= data_3_V_read;
                data_3_V_read_1_reg_1026_pp0_iter1_reg <= data_3_V_read_1_reg_1026;
                data_4_V_read_1_reg_1019 <= data_4_V_read;
                data_4_V_read_1_reg_1019_pp0_iter1_reg <= data_4_V_read_1_reg_1019;
                icmp_ln1496_1_reg_1055 <= icmp_ln1496_1_fu_221_p2;
                icmp_ln1496_2_reg_1070 <= icmp_ln1496_2_fu_237_p2;
                icmp_ln1496_reg_1050 <= icmp_ln1496_fu_215_p2;
                select_ln65_1_reg_1065 <= select_ln65_1_fu_232_p3;
                select_ln65_reg_1060 <= select_ln65_fu_227_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                data_0_V_read_1_reg_1044_pp0_iter2_reg <= data_0_V_read_1_reg_1044_pp0_iter1_reg;
                data_1_V_read_1_reg_1038_pp0_iter2_reg <= data_1_V_read_1_reg_1038_pp0_iter1_reg;
                data_2_V_read_1_reg_1032_pp0_iter2_reg <= data_2_V_read_1_reg_1032_pp0_iter1_reg;
                data_3_V_read_1_reg_1026_pp0_iter2_reg <= data_3_V_read_1_reg_1026_pp0_iter1_reg;
                data_4_V_read_1_reg_1019_pp0_iter2_reg <= data_4_V_read_1_reg_1019_pp0_iter1_reg;
                exp_res_0_V_reg_1230_pp0_iter10_reg <= exp_res_0_V_reg_1230_pp0_iter9_reg;
                exp_res_0_V_reg_1230_pp0_iter11_reg <= exp_res_0_V_reg_1230_pp0_iter10_reg;
                exp_res_0_V_reg_1230_pp0_iter12_reg <= exp_res_0_V_reg_1230_pp0_iter11_reg;
                exp_res_0_V_reg_1230_pp0_iter7_reg <= exp_res_0_V_reg_1230;
                exp_res_0_V_reg_1230_pp0_iter8_reg <= exp_res_0_V_reg_1230_pp0_iter7_reg;
                exp_res_0_V_reg_1230_pp0_iter9_reg <= exp_res_0_V_reg_1230_pp0_iter8_reg;
                exp_res_1_V_reg_1236_pp0_iter10_reg <= exp_res_1_V_reg_1236_pp0_iter9_reg;
                exp_res_1_V_reg_1236_pp0_iter11_reg <= exp_res_1_V_reg_1236_pp0_iter10_reg;
                exp_res_1_V_reg_1236_pp0_iter12_reg <= exp_res_1_V_reg_1236_pp0_iter11_reg;
                exp_res_1_V_reg_1236_pp0_iter7_reg <= exp_res_1_V_reg_1236;
                exp_res_1_V_reg_1236_pp0_iter8_reg <= exp_res_1_V_reg_1236_pp0_iter7_reg;
                exp_res_1_V_reg_1236_pp0_iter9_reg <= exp_res_1_V_reg_1236_pp0_iter8_reg;
                exp_res_2_V_reg_1242_pp0_iter10_reg <= exp_res_2_V_reg_1242_pp0_iter9_reg;
                exp_res_2_V_reg_1242_pp0_iter11_reg <= exp_res_2_V_reg_1242_pp0_iter10_reg;
                exp_res_2_V_reg_1242_pp0_iter12_reg <= exp_res_2_V_reg_1242_pp0_iter11_reg;
                exp_res_2_V_reg_1242_pp0_iter7_reg <= exp_res_2_V_reg_1242;
                exp_res_2_V_reg_1242_pp0_iter8_reg <= exp_res_2_V_reg_1242_pp0_iter7_reg;
                exp_res_2_V_reg_1242_pp0_iter9_reg <= exp_res_2_V_reg_1242_pp0_iter8_reg;
                exp_res_3_V_reg_1248_pp0_iter10_reg <= exp_res_3_V_reg_1248_pp0_iter9_reg;
                exp_res_3_V_reg_1248_pp0_iter11_reg <= exp_res_3_V_reg_1248_pp0_iter10_reg;
                exp_res_3_V_reg_1248_pp0_iter12_reg <= exp_res_3_V_reg_1248_pp0_iter11_reg;
                exp_res_3_V_reg_1248_pp0_iter7_reg <= exp_res_3_V_reg_1248;
                exp_res_3_V_reg_1248_pp0_iter8_reg <= exp_res_3_V_reg_1248_pp0_iter7_reg;
                exp_res_3_V_reg_1248_pp0_iter9_reg <= exp_res_3_V_reg_1248_pp0_iter8_reg;
                exp_res_4_V_reg_1271_pp0_iter10_reg <= exp_res_4_V_reg_1271_pp0_iter9_reg;
                exp_res_4_V_reg_1271_pp0_iter11_reg <= exp_res_4_V_reg_1271_pp0_iter10_reg;
                exp_res_4_V_reg_1271_pp0_iter12_reg <= exp_res_4_V_reg_1271_pp0_iter11_reg;
                exp_res_4_V_reg_1271_pp0_iter9_reg <= exp_res_4_V_reg_1271;
                icmp_ln1496_3_reg_1080 <= icmp_ln1496_3_fu_248_p2;
                inv_exp_sum_V_reg_1330 <= invert_table2_q0;
                mul_ln1118_1_reg_1374 <= grp_fu_995_p2;
                mul_ln1118_2_reg_1379 <= grp_fu_1001_p2;
                mul_ln1118_3_reg_1384 <= grp_fu_1007_p2;
                mul_ln1118_4_reg_1389 <= grp_fu_1013_p2;
                mul_ln1118_reg_1369 <= grp_fu_989_p2;
                p_Result_15_reg_1278 <= ret_V_fu_749_p2(18 downto 18);
                p_Result_16_reg_1289 <= p_Val2_15_fu_763_p2(17 downto 17);
                p_Result_17_reg_1300 <= ret_V_1_fu_833_p2(18 downto 18);
                p_Result_18_reg_1307 <= p_Val2_19_fu_847_p2(17 downto 17);
                p_Val2_12_reg_1259 <= p_Val2_12_fu_707_p3;
                p_Val2_13_reg_1265 <= p_Val2_13_fu_735_p3;
                p_Val2_15_reg_1284 <= p_Val2_15_fu_763_p2;
                select_ln388_5_reg_1295 <= select_ln388_5_fu_787_p3;
                select_ln65_2_reg_1075 <= select_ln65_2_fu_243_p3;
                tmp_10_reg_1120 <= sub_ln1193_2_fu_315_p2(15 downto 15);
                tmp_11_reg_1127 <= sub_ln1193_3_fu_340_p2(16 downto 16);
                tmp_12_reg_1134 <= sub_ln1193_3_fu_340_p2(15 downto 15);
                tmp_13_reg_1141 <= sub_ln1193_4_fu_365_p2(16 downto 16);
                tmp_14_reg_1148 <= sub_ln1193_4_fu_365_p2(15 downto 15);
                tmp_1_reg_1085 <= sub_ln1193_fu_265_p2(16 downto 16);
                tmp_2_reg_1161 <= sub_ln1193_1_fu_290_p2(15 downto 6);
                tmp_3_reg_1092 <= sub_ln1193_fu_265_p2(15 downto 15);
                tmp_4_reg_1167 <= sub_ln1193_2_fu_315_p2(15 downto 6);
                tmp_5_reg_1099 <= sub_ln1193_1_fu_290_p2(16 downto 16);
                tmp_6_reg_1173 <= sub_ln1193_3_fu_340_p2(15 downto 6);
                tmp_7_reg_1106 <= sub_ln1193_1_fu_290_p2(15 downto 15);
                tmp_8_reg_1179 <= sub_ln1193_4_fu_365_p2(15 downto 6);
                tmp_9_reg_1113 <= sub_ln1193_2_fu_315_p2(16 downto 16);
                tmp_reg_1155 <= sub_ln1193_fu_265_p2(15 downto 6);
                tmp_s_reg_1314 <= p_Val2_19_fu_847_p2(17 downto 8);
                y_V_1_reg_1190 <= y_V_1_fu_593_p3;
                y_V_2_reg_1195 <= y_V_2_fu_615_p3;
                y_V_3_reg_1200 <= y_V_3_fu_637_p3;
                y_V_4_reg_1205 <= y_V_4_fu_659_p3;
                y_V_4_reg_1205_pp0_iter5_reg <= y_V_4_reg_1205;
                y_V_4_reg_1205_pp0_iter6_reg <= y_V_4_reg_1205_pp0_iter5_reg;
                y_V_5_reg_1320 <= y_V_5_fu_909_p3;
                y_V_reg_1185 <= y_V_fu_571_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                exp_res_0_V_reg_1230 <= exp_table1_q0;
                exp_res_1_V_reg_1236 <= exp_table1_q1;
                exp_res_2_V_reg_1242 <= exp_table1_q2;
                exp_res_3_V_reg_1248 <= exp_table1_q3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                exp_res_4_V_reg_1271 <= exp_table1_q4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln786_1_fu_466_p2 <= (xor_ln786_1_fu_461_p2 and tmp_5_reg_1099);
    and_ln786_2_fu_490_p2 <= (xor_ln786_2_fu_485_p2 and tmp_9_reg_1113);
    and_ln786_3_fu_514_p2 <= (xor_ln786_3_fu_509_p2 and tmp_11_reg_1127);
    and_ln786_4_fu_538_p2 <= (xor_ln786_4_fu_533_p2 and tmp_13_reg_1141);
    and_ln786_fu_442_p2 <= (xor_ln786_fu_437_p2 and tmp_1_reg_1085);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to15_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to15 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to15)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to15 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_table1_address0 <= zext_ln255_fu_667_p1(10 - 1 downto 0);
    exp_table1_address1 <= zext_ln255_1_fu_671_p1(10 - 1 downto 0);
    exp_table1_address2 <= zext_ln255_2_fu_675_p1(10 - 1 downto 0);
    exp_table1_address3 <= zext_ln255_3_fu_679_p1(10 - 1 downto 0);
    exp_table1_address4 <= zext_ln255_4_fu_683_p1(10 - 1 downto 0);

    exp_table1_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table1_ce0 <= ap_const_logic_1;
        else 
            exp_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table1_ce1 <= ap_const_logic_1;
        else 
            exp_table1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce2_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table1_ce2 <= ap_const_logic_1;
        else 
            exp_table1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce3_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table1_ce3 <= ap_const_logic_1;
        else 
            exp_table1_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce4_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            exp_table1_ce4 <= ap_const_logic_1;
        else 
            exp_table1_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1001_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1001_ce <= ap_const_logic_1;
        else 
            grp_fu_1001_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1001_p0 <= sext_ln1116_fu_921_p1(18 - 1 downto 0);
    grp_fu_1001_p1 <= grp_fu_1001_p10(17 - 1 downto 0);
    grp_fu_1001_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_1242_pp0_iter12_reg),23));

    grp_fu_1007_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1007_ce <= ap_const_logic_1;
        else 
            grp_fu_1007_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1007_p0 <= sext_ln1116_fu_921_p1(18 - 1 downto 0);
    grp_fu_1007_p1 <= grp_fu_1007_p10(17 - 1 downto 0);
    grp_fu_1007_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_3_V_reg_1248_pp0_iter12_reg),23));

    grp_fu_1013_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1013_ce <= ap_const_logic_1;
        else 
            grp_fu_1013_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1013_p0 <= sext_ln1116_fu_921_p1(18 - 1 downto 0);
    grp_fu_1013_p1 <= grp_fu_1013_p10(17 - 1 downto 0);
    grp_fu_1013_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_4_V_reg_1271_pp0_iter12_reg),23));

    grp_fu_989_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_989_ce <= ap_const_logic_1;
        else 
            grp_fu_989_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_989_p0 <= sext_ln1116_fu_921_p1(18 - 1 downto 0);
    grp_fu_989_p1 <= grp_fu_989_p10(17 - 1 downto 0);
    grp_fu_989_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_1230_pp0_iter12_reg),23));

    grp_fu_995_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_995_ce <= ap_const_logic_1;
        else 
            grp_fu_995_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_995_p0 <= sext_ln1116_fu_921_p1(18 - 1 downto 0);
    grp_fu_995_p1 <= grp_fu_995_p10(17 - 1 downto 0);
    grp_fu_995_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_1236_pp0_iter12_reg),23));
    icmp_ln1496_1_fu_221_p0 <= data_2_V_read;
    icmp_ln1496_1_fu_221_p1 <= data_3_V_read;
    icmp_ln1496_1_fu_221_p2 <= "1" when (signed(icmp_ln1496_1_fu_221_p0) < signed(icmp_ln1496_1_fu_221_p1)) else "0";
    icmp_ln1496_2_fu_237_p2 <= "1" when (signed(select_ln65_fu_227_p3) < signed(select_ln65_1_fu_232_p3)) else "0";
    icmp_ln1496_3_fu_248_p2 <= "1" when (signed(select_ln65_2_fu_243_p3) < signed(data_4_V_read_1_reg_1019_pp0_iter1_reg)) else "0";
    icmp_ln1496_fu_215_p0 <= data_0_V_read;
    icmp_ln1496_fu_215_p1 <= data_1_V_read;
    icmp_ln1496_fu_215_p2 <= "1" when (signed(icmp_ln1496_fu_215_p0) < signed(icmp_ln1496_fu_215_p1)) else "0";
    invert_table2_address0 <= zext_ln265_fu_917_p1(10 - 1 downto 0);

    invert_table2_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            invert_table2_ce0 <= ap_const_logic_1;
        else 
            invert_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_1_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_16_fu_816_p3),19));

        lhs_V_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_12_reg_1259),19));

    or_ln340_1_fu_480_p2 <= (xor_ln340_1_fu_475_p2 or tmp_7_reg_1106);
    or_ln340_2_fu_504_p2 <= (xor_ln340_2_fu_499_p2 or tmp_10_reg_1120);
    or_ln340_3_fu_528_p2 <= (xor_ln340_3_fu_523_p2 or tmp_12_reg_1134);
    or_ln340_4_fu_552_p2 <= (xor_ln340_4_fu_547_p2 or tmp_14_reg_1148);
    or_ln340_5_fu_804_p2 <= (xor_ln340_11_fu_799_p2 or p_Result_16_reg_1289);
    or_ln340_6_fu_890_p2 <= (xor_ln340_13_fu_885_p2 or p_Result_18_reg_1307);
    or_ln340_fu_456_p2 <= (xor_ln340_fu_451_p2 or tmp_3_reg_1092);
    p_Result_14_fu_727_p3 <= p_Val2_11_fu_721_p2(17 downto 17);
    p_Result_15_fu_755_p3 <= ret_V_fu_749_p2(18 downto 18);
    p_Result_16_fu_767_p3 <= p_Val2_15_fu_763_p2(17 downto 17);
    p_Result_s_fu_699_p3 <= p_Val2_8_fu_693_p2(17 downto 17);
    p_Val2_10_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_3_V_reg_1248),18));
    p_Val2_11_fu_721_p2 <= std_logic_vector(unsigned(p_Val2_9_fu_715_p1) + unsigned(p_Val2_10_fu_718_p1));
    p_Val2_12_fu_707_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_s_fu_699_p3(0) = '1') else 
        p_Val2_8_fu_693_p2;
    p_Val2_13_fu_735_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_14_fu_727_p3(0) = '1') else 
        p_Val2_11_fu_721_p2;
    p_Val2_15_fu_763_p2 <= std_logic_vector(signed(p_Val2_12_reg_1259) + signed(p_Val2_13_reg_1265));
    p_Val2_16_fu_816_p3 <= 
        select_ln340_12_fu_809_p3 when (or_ln340_5_fu_804_p2(0) = '1') else 
        select_ln388_5_reg_1295;
    p_Val2_17_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_4_V_reg_1271),18));
    p_Val2_19_fu_847_p2 <= std_logic_vector(unsigned(p_Val2_17_fu_823_p1) + unsigned(p_Val2_16_fu_816_p3));
    p_Val2_6_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_1230),18));
    p_Val2_7_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_1236),18));
    p_Val2_8_fu_693_p2 <= std_logic_vector(unsigned(p_Val2_6_fu_687_p1) + unsigned(p_Val2_7_fu_690_p1));
    p_Val2_9_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_1242),18));
    res_0_V <= mul_ln1118_reg_1369(22 downto 15);

    res_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            res_0_V_ap_vld <= ap_const_logic_1;
        else 
            res_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_1_V <= mul_ln1118_1_reg_1374(22 downto 15);

    res_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            res_1_V_ap_vld <= ap_const_logic_1;
        else 
            res_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_2_V <= mul_ln1118_2_reg_1379(22 downto 15);

    res_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            res_2_V_ap_vld <= ap_const_logic_1;
        else 
            res_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_3_V <= mul_ln1118_3_reg_1384(22 downto 15);

    res_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            res_3_V_ap_vld <= ap_const_logic_1;
        else 
            res_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_4_V <= mul_ln1118_4_reg_1389(22 downto 15);

    res_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            res_4_V_ap_vld <= ap_const_logic_1;
        else 
            res_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_833_p2 <= std_logic_vector(signed(lhs_V_1_fu_826_p1) + signed(rhs_V_1_fu_830_p1));
    ret_V_fu_749_p2 <= std_logic_vector(signed(rhs_V_fu_746_p1) + signed(lhs_V_fu_743_p1));
    rhs_V_1_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_4_V_reg_1271),19));
        rhs_V_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_13_reg_1265),19));

    select_ln340_12_fu_809_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln340_10_fu_795_p2(0) = '1') else 
        p_Val2_15_reg_1284;
    select_ln340_14_fu_895_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_12_fu_881_p2(0) = '1') else 
        tmp_s_reg_1314;
    select_ln340_2_fu_579_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_6_fu_471_p2(0) = '1') else 
        tmp_2_reg_1161;
    select_ln340_4_fu_601_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_7_fu_495_p2(0) = '1') else 
        tmp_4_reg_1167;
    select_ln340_6_fu_623_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_8_fu_519_p2(0) = '1') else 
        tmp_6_reg_1173;
    select_ln340_8_fu_645_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_9_fu_543_p2(0) = '1') else 
        tmp_8_reg_1179;
    select_ln340_fu_557_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_5_fu_447_p2(0) = '1') else 
        tmp_reg_1155;
    select_ln388_1_fu_586_p3 <= 
        ap_const_lv10_200 when (and_ln786_1_fu_466_p2(0) = '1') else 
        tmp_2_reg_1161;
    select_ln388_2_fu_608_p3 <= 
        ap_const_lv10_200 when (and_ln786_2_fu_490_p2(0) = '1') else 
        tmp_4_reg_1167;
    select_ln388_3_fu_630_p3 <= 
        ap_const_lv10_200 when (and_ln786_3_fu_514_p2(0) = '1') else 
        tmp_6_reg_1173;
    select_ln388_4_fu_652_p3 <= 
        ap_const_lv10_200 when (and_ln786_4_fu_538_p2(0) = '1') else 
        tmp_8_reg_1179;
    select_ln388_5_fu_787_p3 <= 
        ap_const_lv18_20000 when (underflow_fu_781_p2(0) = '1') else 
        p_Val2_15_fu_763_p2;
    select_ln388_6_fu_902_p3 <= 
        ap_const_lv10_200 when (underflow_1_fu_876_p2(0) = '1') else 
        tmp_s_reg_1314;
    select_ln388_fu_564_p3 <= 
        ap_const_lv10_200 when (and_ln786_fu_442_p2(0) = '1') else 
        tmp_reg_1155;
    select_ln65_1_fu_232_p3 <= 
        data_3_V_read_1_reg_1026 when (icmp_ln1496_1_reg_1055(0) = '1') else 
        data_2_V_read_1_reg_1032;
    select_ln65_2_fu_243_p3 <= 
        select_ln65_1_reg_1065 when (icmp_ln1496_2_reg_1070(0) = '1') else 
        select_ln65_reg_1060;
    select_ln65_fu_227_p3 <= 
        data_1_V_read_1_reg_1038 when (icmp_ln1496_reg_1050(0) = '1') else 
        data_0_V_read_1_reg_1044;
        sext_ln1116_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inv_exp_sum_V_reg_1330),23));

        sext_ln703_1_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_fu_253_p3),17));

        sext_ln703_2_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_1_V_read_1_reg_1038_pp0_iter2_reg),17));

        sext_ln703_3_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_2_V_read_1_reg_1032_pp0_iter2_reg),17));

        sext_ln703_4_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_3_V_read_1_reg_1026_pp0_iter2_reg),17));

        sext_ln703_5_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_4_V_read_1_reg_1019_pp0_iter2_reg),17));

        sext_ln703_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_0_V_read_1_reg_1044_pp0_iter2_reg),17));

    sub_ln1193_1_fu_290_p2 <= std_logic_vector(signed(sext_ln703_2_fu_287_p1) - signed(sext_ln703_1_fu_261_p1));
    sub_ln1193_2_fu_315_p2 <= std_logic_vector(signed(sext_ln703_3_fu_312_p1) - signed(sext_ln703_1_fu_261_p1));
    sub_ln1193_3_fu_340_p2 <= std_logic_vector(signed(sext_ln703_4_fu_337_p1) - signed(sext_ln703_1_fu_261_p1));
    sub_ln1193_4_fu_365_p2 <= std_logic_vector(signed(sext_ln703_5_fu_362_p1) - signed(sext_ln703_1_fu_261_p1));
    sub_ln1193_fu_265_p2 <= std_logic_vector(signed(sext_ln703_fu_258_p1) - signed(sext_ln703_1_fu_261_p1));
    underflow_1_fu_876_p2 <= (xor_ln786_6_fu_871_p2 and p_Result_17_reg_1300);
    underflow_fu_781_p2 <= (xor_ln786_5_fu_775_p2 and p_Result_15_fu_755_p3);
    x_max_V_fu_253_p3 <= 
        data_4_V_read_1_reg_1019_pp0_iter2_reg when (icmp_ln1496_3_reg_1080(0) = '1') else 
        select_ln65_2_reg_1075;
    xor_ln340_10_fu_795_p2 <= (p_Result_16_reg_1289 xor p_Result_15_reg_1278);
    xor_ln340_11_fu_799_p2 <= (p_Result_15_reg_1278 xor ap_const_lv1_1);
    xor_ln340_12_fu_881_p2 <= (p_Result_18_reg_1307 xor p_Result_17_reg_1300);
    xor_ln340_13_fu_885_p2 <= (p_Result_17_reg_1300 xor ap_const_lv1_1);
    xor_ln340_1_fu_475_p2 <= (tmp_5_reg_1099 xor ap_const_lv1_1);
    xor_ln340_2_fu_499_p2 <= (tmp_9_reg_1113 xor ap_const_lv1_1);
    xor_ln340_3_fu_523_p2 <= (tmp_11_reg_1127 xor ap_const_lv1_1);
    xor_ln340_4_fu_547_p2 <= (tmp_13_reg_1141 xor ap_const_lv1_1);
    xor_ln340_5_fu_447_p2 <= (tmp_3_reg_1092 xor tmp_1_reg_1085);
    xor_ln340_6_fu_471_p2 <= (tmp_7_reg_1106 xor tmp_5_reg_1099);
    xor_ln340_7_fu_495_p2 <= (tmp_9_reg_1113 xor tmp_10_reg_1120);
    xor_ln340_8_fu_519_p2 <= (tmp_12_reg_1134 xor tmp_11_reg_1127);
    xor_ln340_9_fu_543_p2 <= (tmp_14_reg_1148 xor tmp_13_reg_1141);
    xor_ln340_fu_451_p2 <= (tmp_1_reg_1085 xor ap_const_lv1_1);
    xor_ln786_1_fu_461_p2 <= (tmp_7_reg_1106 xor ap_const_lv1_1);
    xor_ln786_2_fu_485_p2 <= (tmp_10_reg_1120 xor ap_const_lv1_1);
    xor_ln786_3_fu_509_p2 <= (tmp_12_reg_1134 xor ap_const_lv1_1);
    xor_ln786_4_fu_533_p2 <= (tmp_14_reg_1148 xor ap_const_lv1_1);
    xor_ln786_5_fu_775_p2 <= (p_Result_16_fu_767_p3 xor ap_const_lv1_1);
    xor_ln786_6_fu_871_p2 <= (p_Result_18_reg_1307 xor ap_const_lv1_1);
    xor_ln786_fu_437_p2 <= (tmp_3_reg_1092 xor ap_const_lv1_1);
    y_V_1_fu_593_p3 <= 
        select_ln340_2_fu_579_p3 when (or_ln340_1_fu_480_p2(0) = '1') else 
        select_ln388_1_fu_586_p3;
    y_V_2_fu_615_p3 <= 
        select_ln340_4_fu_601_p3 when (or_ln340_2_fu_504_p2(0) = '1') else 
        select_ln388_2_fu_608_p3;
    y_V_3_fu_637_p3 <= 
        select_ln340_6_fu_623_p3 when (or_ln340_3_fu_528_p2(0) = '1') else 
        select_ln388_3_fu_630_p3;
    y_V_4_fu_659_p3 <= 
        select_ln340_8_fu_645_p3 when (or_ln340_4_fu_552_p2(0) = '1') else 
        select_ln388_4_fu_652_p3;
    y_V_5_fu_909_p3 <= 
        select_ln340_14_fu_895_p3 when (or_ln340_6_fu_890_p2(0) = '1') else 
        select_ln388_6_fu_902_p3;
    y_V_fu_571_p3 <= 
        select_ln340_fu_557_p3 when (or_ln340_fu_456_p2(0) = '1') else 
        select_ln388_fu_564_p3;
    zext_ln255_1_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_reg_1190),64));
    zext_ln255_2_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_reg_1195),64));
    zext_ln255_3_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_reg_1200),64));
    zext_ln255_4_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_4_reg_1205_pp0_iter6_reg),64));
    zext_ln255_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_reg_1185),64));
    zext_ln265_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_5_reg_1320),64));
end behav;
