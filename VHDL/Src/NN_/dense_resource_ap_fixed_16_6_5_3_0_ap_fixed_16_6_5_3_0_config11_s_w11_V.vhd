-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_w11_V_rom is 
    generic(
             DWIDTH     : integer := 76; 
             AWIDTH     : integer := 5; 
             MEM_SIZE    : integer := 32
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_w11_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0001110001100000000101011101111111110111010100000000111101001111110100000001", 
    1 => "0000001011101111111110111001000000011101011000000001010101011111110000101100", 
    2 => "0011100000011111111001101100111111111111100011111111111111100000000010111100", 
    3 => "1110110000001111111010101100000000010011110111111101110010100000000011110011", 
    4 => "0101011100001111111111000000111111011110101111111111111111001111111111101010", 
    5 => "0000000000011111111000101111000000000000000100000000000000001111111111111111", 
    6 => "0001100010011111111111111100000000001010110011111111111111111111111010000000", 
    7 => "1100010100000000000100100110000000001110011000000001101001111111111111100111", 
    8 => "0001111010101111101111000001000000001100101011111111101111100000000000101100", 
    9 => "1000100100100000001011100100000000001101101000000001010001111111111110101100", 
    10 => "1111100110100000010000101001111111111000100111111111101110101111111100010010", 
    11 => "1111111111111111111111111111000000000000000011111111111111111111111111111111", 
    12 => "1111111111111111111111111111000000001000011111111101100001101111111110101001", 
    13 => "1100001101001111100111100101000000110001111111111111001000100000100010011011", 
    14 => "0001111001011111100100100011000000000000001000000000110010100000000000000000", 
    15 => "1111111111111111111111111111111111111111111100000000000000001111111111111111", 
    16 => "1110110100010000000000000110111111100100001100000000111111000000001011100101", 
    17 => "1111111111111111111111111111000000000000000011111111111111111111111111111111", 
    18 => "1111000011100000001101000000000000101011110111111100101000011111110110010011", 
    19 => "0000111100111111111111111111000000001101111011111111111111111111111110110011", 
    20 => "1111111101011111111111000011000000000000100011111101111001100000000101110101", 
    21 => "0000010110100000000000111101111110101011010100000000100111100000000011100010", 
    22 => "1111111111111111111111111100000000001101001000000000100001011111111111111111", 
    23 => "0010000011010000000110011011111111111111110111111111011100011111110011110100", 
    24 => "0001110111111111111000010010111111101001010000000001000001010000000001010000", 
    25 => "0010010101101111111001101100111111101111110100000000000000000000000000000001", 
    26 => "1111111111110000000000000000000000000000000011111111111111110000000000000000", 
    27 => "1110010000011111110110100010000000000000000100000001100000000000000100100000", 
    28 => "0000000010011111111111111010111111111111111100000011001100011111111110000101", 
    29 => "0010100110110000001100010111111111101001111111111100001010011111101111111010", 
    30 => "0000000000001111111111111111000000000000000011111111111111111111111111111111", 
    31 => "0000101100111111111111111101111110010000110000000001101010000000000101000111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_w11_V is
    generic (
        DataWidth : INTEGER := 76;
        AddressRange : INTEGER := 32;
        AddressWidth : INTEGER := 5);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_w11_V is
    component dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_w11_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_w11_V_rom_U :  component dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_w11_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


