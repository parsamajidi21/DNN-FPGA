-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_w11_V_rom is 
    generic(
             DWIDTH     : integer := 76; 
             AWIDTH     : integer := 5; 
             MEM_SIZE    : integer := 32
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_w11_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1010110110100000011000001100000000000000101011111110010010001111111111101111", 
    1 => "1110000110011111111111111101111111111001000000000000101001010000000110111011", 
    2 => "1110100110101111111101000011000000010100110000000000110011101111111111111111", 
    3 => "0010000110110000001001010110111111101101000000000001001000101111110001111101", 
    4 => "0011010111000000001010000011111111101010100111111101000101111111110100001001", 
    5 => "1110111011001111111111111110111111110111000000000000000000000000000101001001", 
    6 => "0100000000101111100001100101111111111011111100000000000000100000000000001010", 
    7 => "0100110100101111101001010111111111010010100100000000010010100000000011000111", 
    8 => "1110110011001111111010001111000000011011111000000001001100100000000000000000", 
    9 => "0001001111111111111011010101111111110000010000000000001010001111111111111111", 
    10 => "1101111100011111110101001111000000010011110000000001010001000000001001000110", 
    11 => "1111111111111111111111111111111111111111111100000000000000001111111111111111", 
    12 => "1111111111010000000001110110000000110011010111111101111001011111111001110000", 
    13 => "0000000000000000000000000000000000000000000000000000000000001111111111111111", 
    14 => "0001000000110000000001011001111110101101011000000000111001100000001000000010", 
    15 => "1111110010001111111001000010000000000101110111111111111111110000001001100011", 
    16 => "1111010000011111111111111110111111101110001000000000111101101111111111111111", 
    17 => "1111111111110000000000000000000000000000000000000000000000001111111111111111", 
    18 => "0000111111100000000100100001111111111111111100000001000000001111101101100100", 
    19 => "1110000010111111111010111110000000000000000100000010011000110000000000000000", 
    20 => "0000001101000000000000000010111111110010101100000010100100111111110001011011", 
    21 => "1100001100111111111111111011111111111100101100000101001111000000000001101001", 
    22 => "0011000011111111111111111101111110100110011100000010000010011111111111111101", 
    23 => "0000000000001111111111111110000000000000000000000000000000001111111111111111", 
    24 => "1111111101101111111111111111000000011000010000000000101111011111111101000011", 
    25 => "0000010011111111111111111010000000101010100111111100101000101111111000000001", 
    26 => "0101101001011111111111111110000000000000001100000000000000001111111111111110", 
    27 => "0000000000000000000000000000000000000000000000000000000000001111111111111111", 
    28 => "1111111111111111111111111111111111111111111111111111111111110000000000000000", 
    29 => "1111011110011111111110010000000000010111101111111110001101010000001010100111", 
    30 => "1111111111010000001000111110000000100110000111111100111110001111110101001100", 
    31 => "0001001111000000001001100011111111001000100111111101011101000000000000110000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_w11_V is
    generic (
        DataWidth : INTEGER := 76;
        AddressRange : INTEGER := 32;
        AddressWidth : INTEGER := 5);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_w11_V is
    component dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_w11_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_w11_V_rom_U :  component dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config11_s_w11_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


